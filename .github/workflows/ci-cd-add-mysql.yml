name: Full CI/CD - Lint, Build, Push, and Deploy (Compose + MySQL)

on:
  push:
    branches: ["main"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with ruff
        run: ruff check .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/branch_practice:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 with Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            APP_DIR="/home/ubuntu/app"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            # Docker Hub login (private 이미지라면 필요)
            if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
              echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
            fi

            # compose용 외부 네트워크(최초 1회 생성)
            docker network create appnet || true

            # .env 생성 (모든 민감 값은 Secrets에서 주입)
            cat > .env << 'EOF'
            # Web → MySQL 접속
            DB_HOST=db
            DB_USER=${{ secrets.MYSQL_USER }}
            DB_PASS=${{ secrets.MYSQL_PASSWORD }}
            DB_NAME=${{ secrets.MYSQL_DATABASE }}

            # MySQL 컨테이너 초기화
            MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
            MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
            MYSQL_USER=${{ secrets.MYSQL_USER }}
            MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
            EOF

            # docker-compose.prod.yml 생성
            cat > docker-compose.prod.yml << 'EOF'
            version: "3.9"

            services:
              db:
                image: mysql:8
                container_name: mysql_db
                restart: always
                env_file: .env
                volumes:
                  - mysql_data:/var/lib/mysql
                networks: [appnet]
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
                  interval: 5s
                  timeout: 3s
                  retries: 30

              web:
                image: ${DOCKERHUB_IMAGE}
                container_name: branch_practice_web
                restart: always
                env_file: .env
                ports:
                  - "80:8000"
                depends_on:
                  db:
                    condition: service_healthy
                networks: [appnet]

            networks:
              appnet:
                external: true

            volumes:
              mysql_data:
            EOF

            # 이미지 경로 치환
            sed -i "s|\${DOCKERHUB_IMAGE}|${{ secrets.DOCKERHUB_USERNAME }}/branch_practice:latest|g" docker-compose.prod.yml

            # 배포
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            # 상태 및 헬스 확인
            docker compose -f docker-compose.prod.yml ps

            # 앱이 /db-check 200 OK 낼 때까지 대기
            for i in {1..30}; do
              CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/db-check || true)
              if [ "$CODE" = "200" ]; then
                echo "App DB check OK (HTTP 200)"
                break
              fi
              echo "Waiting for app to be ready... ($i)"
              sleep 2
            done

            if [ "$CODE" != "200" ]; then
              echo "ERROR: /db-check failed"
              echo "==== web logs ===="
              docker logs branch_practice_web --tail 200 || true
              echo "==== mysql logs ===="
              docker logs mysql_db --tail 200 || true
              exit 1
            fi

            # (옵션) 실제 SQL도 한 번 찍어보기
            docker exec mysql_db mysql -u"${{ secrets.MYSQL_USER }}" -p"${{ secrets.MYSQL_PASSWORD }}" -e "SELECT NOW(); USE ${{ secrets.MYSQL_DATABASE }}; SELECT 1 AS ok;"
