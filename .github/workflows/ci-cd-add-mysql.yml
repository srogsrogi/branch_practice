deploy:
  needs: build-and-push
  runs-on: ubuntu-latest
  steps:
    - name: Deploy to EC2 with Docker Compose (MySQL + Web)
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -e
          APP_DIR="/home/ubuntu/app"

          # 0) Docker 데몬 기동/확인 + compose 플러그인 보장
          if ! command -v docker >/dev/null 2>&1; then
            echo "Docker not found. Install Docker CE first."
            exit 1
          fi
          sudo systemctl enable --now docker
          sudo docker version

          if ! sudo docker compose version >/dev/null 2>&1; then
            echo "docker compose plugin not found. Installing..."
            sudo apt-get update -y
            sudo apt-get install -y docker-compose-plugin
          fi
          sudo docker compose version

          # 1) 작업 디렉토리 준비
          mkdir -p "$APP_DIR"
          cd "$APP_DIR"

          # 2) (프라이빗 이미지면) Docker Hub 로그인
          if [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "${{ secrets.DOCKERHUB_TOKEN }}" | sudo docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          fi

          # 3) 외부 네트워크(최초 1회)
          sudo docker network create appnet || true

          # 4) .env 생성 (Secrets 주입)
          cat > .env << 'EOF'
          DB_HOST=db
          DB_USER=${{ secrets.MYSQL_USER }}
          DB_PASS=${{ secrets.MYSQL_PASSWORD }}
          DB_NAME=${{ secrets.MYSQL_DATABASE }}
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          EOF

          # 5) docker-compose.prod.yml 생성 (version 키 제거)
          cat > docker-compose.prod.yml << 'EOF'
          services:
            db:
              image: mysql:8
              container_name: mysql_db
              restart: always
              env_file: .env
              volumes:
                - mysql_data:/var/lib/mysql
              networks: [appnet]
              healthcheck:
                test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
                interval: 5s
                timeout: 3s
                retries: 30

            web:
              image: ${DOCKERHUB_IMAGE}
              container_name: branch_practice_web
              restart: always
              env_file: .env
              ports:
                - "80:8000"
              depends_on:
                db:
                  condition: service_healthy
              networks: [appnet]

          networks:
            appnet:
              external: true

          volumes:
            mysql_data:
          EOF

          # 이미지 경로 치환
          sudo sed -i "s|\${DOCKERHUB_IMAGE}|${{ secrets.DOCKERHUB_USERNAME }}/branch_practice:latest|g" docker-compose.prod.yml

          # 6) 배포
          sudo docker compose -f docker-compose.prod.yml pull
          sudo docker compose -f docker-compose.prod.yml up -d

          # 7) 상태 확인
          sudo docker compose -f docker-compose.prod.yml ps

          # 8) 앱 헬스체크 (/db-check 200 OK까지 대기)
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost/db-check || true)
            if [ "$CODE" = "200" ]; then
              echo "App DB check OK (HTTP 200)";
              break
            fi
            echo "Waiting for app to be ready... ($i)"; sleep 2
          done

          if [ "$CODE" != "200" ]; then
            echo "ERROR: /db-check failed"
            echo "==== web logs ====";   sudo docker logs branch_practice_web --tail 200 || true
            echo "==== mysql logs ===="; sudo docker logs mysql_db --tail 200 || true
            exit 1
          fi

          # (옵션) 실제 SQL 확인
          sudo docker exec mysql_db mysql -u"${{ secrets.MYSQL_USER }}" -p"${{ secrets.MYSQL_PASSWORD }}" -e "SELECT NOW(); USE ${{ secrets.MYSQL_DATABASE }}; SELECT 1;"
